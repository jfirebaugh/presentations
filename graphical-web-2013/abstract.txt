A typical web application today is built with a Model-View-Whatever framework
such as Backbone.js, Ember or Angular.js, a DOM-oriented library like jQuery or
Zepto, and a templating language such as moustache or handlebars. In building
iD, a new editor for OpenStreetMap, we took a different approach. iD is built
almost entirely using D3 -- no framework, no $, no templates. At the DOM level,
D3 does 90% of what we would have needed jQuery for, in a simpler, more
predictable, and more flexible way. Ubiquitous data binding transforms the
typical procedural snarl of jQuery code into simple, linear, declarative
specifications. And it's easy and fun to write D3 plugins for the remaining
10%. Instead of templates, all view code is written in pure JavaScript using
D3's data joins. Data never need to round-trip through `data-` attributes or be
forced into sub-views in order be accessible to event bindings. More generally,
the power curve is continuous and unlimited: views can start simple, but grow
to take advantage of the full expressiveness of JavaScript and sophistication
of transitions and behaviors. Finally, data joins provide a highly performant
mechanism for incremental updates compared to a typical `innerHTML` approach.
For many applications, a model/collection, CRUD-based approach for data
modelling is perfectly adequate. But for iD, a data-intensive application with
complex internal state, we needed something different. We wrote a custom data
model in which individual objects and the object graph are both immutable and
persistent: instead of modifying the graph in place, edits to the map produce
new object versions and a new graph. Unchanged portions of the graph are
shared, keeping memory usage low. This model transformed what is typically one
of the most complex and error prone parts of the editor -- undo/redo -- into
one of the simplest and most transparent. In a framework which couples
View-Whatever to Model, it wouldn't have been possible. With D3's data format
agnosticism, it was easy. A pure D3 approach is not without disadvantages.
Advanced use of data joins and lack of templates makes code potentially
inaccessible to people who are better at design than you. You buy in to D3's
rejection of IE9 and prior. And as with so many things in the world of
client-side JavaScript, consensus has yet to form on the question of how best
to abstract and distribute reusable controls built with D3 (though I have my
opinion). For iD, these shortcomings were not serious. We have been thrilled
with the results, and continue to use it for a variety of projects.
